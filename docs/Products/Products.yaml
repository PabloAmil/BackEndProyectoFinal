paths:

  put:
  /api/products/:

    get:
      tags:
        - Products
      summary: Get Products
      description: Returns a list of products with optional filtering, pagination, and sorting.
      operationId: getProducts
      parameters:
        - name: page
          in: query
          description: Number of the page to retrieve (default is 1).
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: Maximum number of products per page (default is 10).
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: Sort order of the products (asc or desc, default is desc).
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: category
          in: query
          description: Filter products by category.
          required: false
          schema:
            type: string
        - name: stock
          in: query
          description: Filter products by stock availability.
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  docs:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        title:
                          type: string
                        description:
                          type: string
                        code:
                          type: string
                        price:
                          type: number
                        status:
                          type: string
                        stock:
                          type: number
                        category:
                          type: string
                        photo:
                          type: string
                        owner:
                          type: string
                        __v:
                          type: number
                        id:
                          type: string
                  totalDocs:
                    type: number
                  limit:
                    type: number
                  totalPages:
                    type: number
                  page:
                    type: number
                  pagingCounter:
                    type: number
                  hasPrevPage:
                    type: boolean
                  hasNextPage:
                    type: boolean
                  prevPage:
                    type: null
                  nextPage:
                    type: null
        500:
          description: Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to retrieve products."


  /api/products/new: 
    get: 
        tags:
        - Products
        summary: Create products
        description: Redirects to an endpoint POST to create a product. Being logged in and permissions above "Premium" are required.
        operationId: getProducts



  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get Products by ID
      description: Returns an unique product based on the given ID. Try this one 66383a362b7590d073effbfd
      operationId: getProductById
      parameters:
        - name: id
          in: path
          description: ID of the product.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found."
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  result:
                    type: string
                    example: "Error"
                  error:
                    type: string
                    example: "Error getting product"


  /api/products:
    post:
      tags:
        - Products
      summary: Create a new product
      description: Adds a new product to database. Requires to be logged in and permissions above "Premium".
      operationId: addProduct
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Product title.
                description:
                  type: string
                  description: Product description.
                code:
                  type: string
                  description: Product code.
                price:
                  type: number
                  description: Product price.
                status:
                  type: string
                  description: Product status.
                stock:
                  type: number
                  description: Product available stock.
                category:
                  type: string
                  description: Product category.
                image:
                  type: string
                  format: binary
                  description: Product image.
      responses:
        200:
          description: Product added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product added successfully."
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  result:
                    type: string
                    example: "Error"
                  error:
                    type: string
                    example: "Error while attepting to add product"

  /api/products/product-edit/{id}:
    get:
      tags:
        - Products
      summary: Redirects to a view to update product and make POST request.
      description: Requires to be logged in and Admin permissions
      operationId: getProductForEditing
      parameters:
        - name: id
          in: path
          description: ID of the product to retrieve for editing.
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: Title of the product.
                  description:
                    type: string
                    description: Description of the product.
                  price:
                    type: number
                    description: Price of the product.
                  photo:
                    type: string
                    description: Photo of the product.
                  isStock:
                    type: boolean
                    description: Indicates if the product is in stock.
                  id:
                    type: string
                    description: ID of the product.
                  style:
                    type: string
                    description: CSS style for the product update page.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sorry, you don't have the credentials to modify this product."
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found."
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  result:
                    type: string
                    example: "Error"
                  error:
                    type: string
                    example: "There was a problem while attempting to update product."


  /api/products/admin-update/{id}:
    post:
      tags:
        - Products
      summary: Update Product by Admin
      description: Updates an existing product based on the provided ID. Only Admin can do this.
      operationId: updateProductByAdmin
      parameters:
        - name: id
          in: path
          description: ID of the product to update.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the product.
                description:
                  type: string
                  description: Description of the product.
                code:
                  type: string
                  description: Code of the product.
                price:
                  type: number
                  description: Price of the product.
                status:
                  type: string
                  description: Status of the product.
                stock:
                  type: number
                  description: Stock of the product.
                category:
                  type: string
                  description: Category of the product.
                image:
                  type: string
                  format: binary
                  description: Image of the product.
      responses:
        '200':
          description: Product updated Successfully 
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product update success"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Error while trying to update product"

  /api/products/delete/{id}:
    delete:
      tags:
        - Products
      summary: Delete Product
      description: Deletes a product based on the provided ID. Requires to be logged in. Only Premium users car delete their items. An admin can delete any item.
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: ID of the product to delete.
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Product deletion success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product deletion success"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Only the product creator or an Admin can delete this product."
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Error while trying to delete product"


components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        code:
          type: string
        price:
          type: number
        status:
          type: string
        stock:
          type: number
        category:
          type: string
        photo:
          type: string
        owner:
          type: string
        __v:
          type: number
        id:
          type: string

          